require File.dirname(__FILE__) + '/../lib/microsoft_ngram'

# S comtains the state we use to move query the model.
# 
class S
  attr_accessor :prefix, :pattern, :max_wild_children, :max_literal_children, :max_length, :cp, :model
  def initialize(prefix, pattern, max_wild_children, max_literal_children, max_length, cp, model)
    @prefix = prefix
    @pattern = pattern
    @max_wild_children = max_wild_children
    @max_literal_children = max_literal_children
    @cp = cp
    @model = model
    @max_length = max_length
  end
  
  def to_s
    "S(#{@prefix.inspect}:#{@pattern.inspect}:#{cp})"
  end
  
  def children
    return [] if @pattern.size == 0
    return [] if @prefix.split.size >= @max_length
    hd = @pattern.first
    tail = @pattern[1..-1]
    # puts "pattern: #{@pattern.inspect}; hd: #{hd.inspect}; tail: #{tail.inspect}"
    if hd.class == String
      string_children(hd, tail)
    else
      wildcard_children(hd, tail)
    end
  end
  
  def string_children(hd, tail)
    query = @prefix.size > 0 ? "#{@prefix} #{@pattern[0]}" : @pattern[0]
    pairs = @model.generate_list(query,@max_literal_children)
    pairs.map{|w,cp| S.new("#{query} #{w}", tail, @max_wild_children, @max_literal_children, @max_length, cp, @model)}
  end
  
  def wildcard_children(hd, tail)
    n = @pattern[0][0]
    return [] if n<1 # the 'one' was generated by the string children or the previous iteration
    pairs = @model.generate_list(@prefix,@max_wild_children)
    pairs.map{|w,cp| S.new("#{@prefix} #{w}",([[n-1]] + tail),@max_wild_children, @max_literal_children, @max_length, cp, @model)}
  end
end

# R is the machine that generates most likely phrases with wildcards
#  it is intialized with
#   pattern = an array of alternating string and size requirements specified as [i]
#      eg ["veritable", [2], "of" [2]] -> look for 'veritable', then up to 2 tokens then 'of', then up to two tokens
#         it has to be at least [1]
#   max_wild_children : for wildcards (size requirement), the maximum number to inspect at this point
#   max_literal_children: for strings, the max number of tokens to inspect
#   model: the corpus in bing format, eg "bing-body/apr10/5". Leave nil to use the 'best' (latest, longest, body)
#   verbose: if true, a few messages printed to $stderr
class R
  attr_accessor :pattern, :regex, :max_wild_children, :max_literal_children, :max_length, :model, :verbose
  
  def initialize(pattern, args = {})
    @pattern = pattern
    raise "Pattern must be array" unless @pattern.class == Array
    raise "First item #{@pattern[0].inspect} must be a string" unless @pattern[0].class == String
    unless pattern.all?{|el| el.class==String || (el.class==Array  && el[0].class==Fixnum)}
      raise "Pattern items must be strings or arrays of numbers"
    end 
    @model = !args[:model] ? Bing::Ngram.new : (args[:model].class==String ? Bing::Ngram.new(args[:model]) : args[:model])
    @max_wild_children = args[:max_wild_children] || 20
    @max_literal_children = args[:max_literal_children] || 100
    @max_length = args[:max_length] || Bing::CorpusSpec.new(@model.model).size
    @verbose = args[:verbose] || false
    @regex = pattern_to_regex(pattern)
  end

  # converts the pattern to a reg expression
  def pattern_to_regex(pattern)
    def array_to_regex(n)
      case n
      when 1 
        "\\S+"
      else
        "(?:\\S+ ){0,#{n-1}}\\S+"
      end
    end
    str = pattern.map do |el|
      el.class==String ? el : array_to_regex(el[0])
    end.join(" ")
    Regexp.new(str)
  end
  
  # does the generated phrase match?
  def matches(str)
    (@regex =~ str) && true
  end
  
  # generate  -- yields tuples of prefix, cp, and jp
  def generate
    stack = []
    s = S.new("",@pattern, @max_wild_children, @max_literal_children, @max_length, 0.0, @model)
    $stderr.puts "Generate:Initializing.. #{s.inspect}." if @verbose
    stack.push(s)
    until stack.empty?
     current = stack.pop
     $stderr.puts("Current state: #{current}; stack size: #{stack.size}") if @verbose
     if matches(current.prefix)
       jp = @model.jp(current.prefix)
       yield [current.prefix, current.cp, jp]
     else
       $stderr.puts("Not a match: #{current.prefix.inspect}") if @verbose
     end
     current.children.each{|child|  stack.push(child);  $stderr.puts "Added child: #{child}" if @verbse}
    end
  end
end




# examples 
# #x = R.new([ "veritable", [2], "of", [2] ], 20, 100, 5)

